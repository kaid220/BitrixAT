import java.lang.reflect.Method
import java.sql.Connection
import java.sql.Driver
import java.sql.DriverManager
import java.sql.SQLException
import java.sql.Statement


/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.5/samples
 */
plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'idea'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
compileGroovy.options.encoding ='UTF-8'
compileTestGroovy.options.encoding='UTF-8'
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.apache.groovy:groovy:4.0.0'


    // Use the awesome Spock testing and specification framework even with Java
    implementation 'org.spockframework:spock-junit4:2.4-M1-groovy-4.0'
    // use selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.16.1'
    //use GEB
    implementation 'org.gebish:geb-spock:7.0'
    //use logger
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    //use restAssured
    implementation 'io.rest-assured:rest-assured:5.4.0'
    //use mySqlConnector
    implementation 'mysql:mysql-connector-java:8.0.11'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

test{ useJUnitPlatform()
   maxParallelForks = 2
systemProperty('file.encoding','UTF-8')}

List<String> selectTests(){
    List<String> testNumbers
    try {
        Statement sql = createConnection().createStatement()
        testNumbers = sql.executeQuery("SELECT testName FROM autotests ORDER BY idtests DESC")
        testNumbers
    }
    catch (Exception e){
        e.printStackTrace()
    }
}

task runTests(){
    doLast {
        List<String> listOfTests = selectTests()
    }
}

List<String> selectFailedTests(){
    List<String> testNumbers
    try {
        Statement sql = createConnection().createStatement()
        testNumbers = sql.executeQuery("SELECT testName FROM autotests WHERE lastStatus='FAILED' ORDER BY idtests DESC")
        testNumbers
    }
    catch (Exception e){
        e.printStackTrace()
    }
}

static Connection createConnection(){
    final String dbURL = "jdbc:mysql://localhost:3306/bitrixat?serverTimezone=UTC&useSSL=false"
    final String userName = "root"
    final String userPass = "rootPassword"
    try {

        Connection connection = DriverManager.getConnection(dbURL,userName,userPass)
        connection
    }
    catch (SQLException e){
        e.printStackTrace()
    }
}

static String getLocalProperty(String value){
    Properties properties = new Properties()
    properties.load(new File("src/test/resources/localSetting.properties"))


}


